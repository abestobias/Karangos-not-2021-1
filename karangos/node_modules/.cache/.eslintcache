[{"/workspace/Karangos-not-2021-1/karangos/src/index.js":"1","/workspace/Karangos-not-2021-1/karangos/src/reportWebVitals.js":"2","/workspace/Karangos-not-2021-1/karangos/src/App.js":"3","/workspace/Karangos-not-2021-1/karangos/src/routed/KarangosForm.js":"4","/workspace/Karangos-not-2021-1/karangos/src/ui/FooterBar.js":"5","/workspace/Karangos-not-2021-1/karangos/src/ui/TopBar.js":"6","/workspace/Karangos-not-2021-1/karangos/src/routed/KarangosList2.js":"7","/workspace/Karangos-not-2021-1/karangos/src/ui/ConfirmDialog.js":"8","/workspace/Karangos-not-2021-1/karangos/src/ui/MainMenu.js":"9","/workspace/Karangos-not-2021-1/karangos/src/routed/KarangosList.js":"10","/workspace/Karangos-not-2021-1/karangos/src/routed/ClienteForm.js":"11","/workspace/Karangos-not-2021-1/karangos/src/routed/ClienteList.js":"12"},{"size":500,"mtime":1621980321000,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1621980323000,"results":"15","hashOfConfig":"14"},{"size":2809,"mtime":1622922627000,"results":"16","hashOfConfig":"14"},{"size":14729,"mtime":1622917911000,"results":"17","hashOfConfig":"14"},{"size":1341,"mtime":1621980329000,"results":"18","hashOfConfig":"14"},{"size":1069,"mtime":1621980330000,"results":"19","hashOfConfig":"14"},{"size":6161,"mtime":1622917854000,"results":"20","hashOfConfig":"14"},{"size":1607,"mtime":1621980328000,"results":"21","hashOfConfig":"14"},{"size":2148,"mtime":1623003378000,"results":"22","hashOfConfig":"14"},{"size":8127,"mtime":1621980325681,"results":"23","hashOfConfig":"24"},{"size":16700,"mtime":1623015435000,"results":"25","hashOfConfig":"14"},{"size":7182,"mtime":1623001615000,"results":"26","hashOfConfig":"14"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"t1goty",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"y5ho5m",{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/workspace/Karangos-not-2021-1/karangos/src/index.js",[],"/workspace/Karangos-not-2021-1/karangos/src/reportWebVitals.js",[],"/workspace/Karangos-not-2021-1/karangos/src/App.js",[],"/workspace/Karangos-not-2021-1/karangos/src/routed/KarangosForm.js",["53"],"import React from 'react';\nimport { useEffect, useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Checkbox, FormControl, FormControlLabel, Toolbar } from '@material-ui/core';\nimport InputMask from 'react-input-mask';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Button from '@material-ui/core/Button';\nimport axios from 'axios';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport { useHistory, useParams } from 'react-router-dom';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nconst useStyles = makeStyles(() => ({\n    form: {\n        //backgroundColor: 'green',  // Cor de debug\n        maxWidth: '80%',\n        margin: '0 auto',\n        display: 'flex',\n        justifyContent: 'space-around',\n        flexWrap: 'wrap',\n        '& .MuiFormControl-root': {\n            minWidth: '200px',\n            maxWidth: '500px',\n            marginBottom: '24px'\n        }\n    },\n    toolbar: {\n        marginTop: '36px',\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'space-around',\n    },\n    checkbox: {\n        alignItems: 'center'\n    }\n}))\n\n/* \nClasses de caracteres de entrada para a máscara do campo placa\n    1) Três primeiras posições: qualquer letra, de A a Z (maiúsculo ou minúsculo) ~> [A-Za-z]\n    2) Posições numéricas (1ª, a 3ª e a 4ª depois do traço) ~> [0-9]\n    3) 2ª posição após o traço: pode receber dígitos ou letras de A a J (maiúsculas ou minúsculas) ~> [0-9A-Ja-j]\n*/\n\n// Representando as classes de caracteres da máscara como um objeto\nconst formatChars = {\n    'A': '[A-Za-z]',\n    '0': '[0-9]',\n    '#': '[0-9A-Ja-j]'\n}\n\n// Finalmente, a máscara de entrada do campo placa\nconst placaMask = 'AAA-0#00'\n\n// Máscara para CPF: '000.000.000-00'\n// Máscara para CNPJ: '00.000.000/0000-00'\n\n\nexport default function KarangosForm() {\n\n    const classes = useStyles()\n\n    const [karango, setKarango] = useState({\n        id: null,\n        marca: '',\n        modelo: '',\n        cor: '',\n        ano_fabricacao: (new Date()).getFullYear(),  // Ano corrente\n        importado: '0',\n        placa: '',\n        preco: 0\n    })\n\n    // const [currentId, setCurrentId] = useState()\n    const [importadoChecked, setImportadoChecked] = useState()\n\n    const [snackState, setSnackState] = useState({\n        open: false,\n        severity: 'success',\n        message: 'Karango salvo com sucesso.'\n    })\n\n    const [btnSendState, setBtnSendState] = useState({\n        disabled: false,\n        label: 'Enviar'\n    })\n\n    const [error, setError] = useState({\n        marca: '',\n        modelo: '',\n        cor: '',\n        placa: '',\n        preco: ''\n    })\n\n    const [isModified, setIsModified] = useState(false)\n\n    const [dialogOpen, setDialogOpen] = useState(false) // O diálogo de confirmação está aberto?\n\n    const [title, setTitle] = useState('Cadastrar Karango')\n\n    const history = useHistory()\n    const params = useParams()\n\n    useEffect(() => {\n\n        // Verificac se tem o parâmetro id na rota. Se tiver, temos que buscar\n        // os dados do registro no back-end para edição\n        if (params.id) {\n            setTitle('Editando Karango')\n            getData(params.id)\n        }\n    }, [])\n\n    async function getData(id) {\n        try {\n            let response = await axios.get(`https://api.faustocintra.com.br/karangos/${id}`)\n            setKarango(response.data)\n        }\n        catch (error) {\n            setSnackState({\n                open: true,\n                severity: 'error',\n                message: 'Não foi possível carregar os dados para edição.'\n            })\n        }\n    }\n\n    function handleInputChange(event, property) {\n\n        const karangoTemp = { ...karango }\n        let importadoCheckedTemp = importadoChecked\n\n        // Se houver id no event.target, ele será o nome da propriedade\n        // senão, usaremos o valor do segundo parâmetro\n        if (event.target.id) property = event.target.id\n\n        if (property === 'importado') {\n            const newState = !importadoChecked\n            //setKarango({ ...karango, importado: (newState ? '1' : '0') })\n            karangoTemp.importado = (newState ? '1' : '0')\n\n            //setImportadoChecked(newState)\n            importadoCheckedTemp = newState\n        }\n        else if (property === 'placa') {\n            //setKarango({ ...karango, [property]: event.target.value.toUpperCase() })\n            karangoTemp[property] = event.target.value.toUpperCase()\n        }\n        else karangoTemp[property] = event.target.value\n        // Quando o nome de uma propriedade de um objeto aparece entre [],\n        // isso se chama \"propriedade calculada\". O nome da propriedade vai\n        // corresponder à avaliação da expressão entre os colchetes\n        //setCurrentId(event.target.id)\n        //setKarango({ ...karango, [property]: event.target.value })\n        setKarango(karangoTemp)\n        setImportadoChecked(importadoCheckedTemp)\n        setIsModified(true)   // O formulário foi modificado\n        validate(karangoTemp)       // Dispara a validação\n    }\n\n    function validate(data) {\n\n        const errorTemp = {\n            marca: '',\n            modelo: '',\n            cor: '',\n            placa: '',\n            preco: ''\n        }\n        let isValid = true\n\n        // Validação do campo marca\n        if (data.marca.trim() === '') {     // trim(): retira os espaços em branco do nício e do final de uma string\n            errorTemp.marca = 'A marca deve ser preenchida'\n            isValid = false\n        }\n\n        // Validação do campo modelo\n        if (data.modelo.trim() === '') {     // trim(): retira os espaços em branco do nício e do final de uma string\n            errorTemp.modelo = 'A modelo deve ser preenchido'\n            isValid = false\n        }\n\n        // Validação do campo cor\n        if (data.cor.trim() === '') {     // trim(): retira os espaços em branco do nício e do final de uma string\n            errorTemp.cor = 'Escolha uma cor'\n            isValid = false\n        }\n\n        // Validação do campo placa\n        // valor válido não pode ser string vazia e nem conter o caracter _ (sublinhado)\n        if (data.placa.trim() === '' || data.placa.includes('_')) {     // trim(): retira os espaços em branco do nício e do final de uma string\n            errorTemp.placa = 'A placa deve ser corretamente preenchida'\n            isValid = false\n        }\n\n        // Validação do campo preco\n        if (isNaN(data.preco) || Number(data.preco) <= 0) {     // trim(): retira os espaços em branco do nício e do final de uma string\n            errorTemp.preco = 'O preço deve ser preenchido e maior que zero'\n            isValid = false\n        }\n\n        setError(errorTemp)\n        return isValid\n\n    }\n\n    function years() {\n        let result = []\n        for (let i = (new Date()).getFullYear(); i >= 1900; i--) result.push(i)\n        return result\n    }\n\n    async function saveData() {\n        try {\n            // Desabilitar o botão Enviar\n            setBtnSendState({ disabled: true, label: 'Enviando...' })\n\n            // Se o registro já existe (edição)\n            if (params.id) {\n                await axios.put(`https://api.faustocintra.com.br/karangos/${params.id}`, karango)\n            }\n            // Registro não existe, cria um novo (verbo HTTP POST)\n            else {\n                await axios.post(`https://api.faustocintra.com.br/karangos`, karango)\n            }\n            //alert('Dados salvos com sucesso!')\n            setSnackState({\n                open: true,\n                severity: 'success',\n                message: 'Karango salvo com sucesso!'\n            })\n        }\n        catch (error) {\n            //alert('ERRO: ' + error.message)\n            setSnackState({\n                open: true,\n                severity: 'error',\n                message: 'ERRO: ' + error.message\n            })\n        }\n        // Reabilita o botão Enviar\n        setBtnSendState({ disabled: false, label: 'Enviar' })\n    }\n\n    function handleSubmit(event) {\n\n        event.preventDefault()   // Evitar o recarregamento da página\n\n        // Só salva os dados se forem válidos\n        if (validate(karango)) saveData()\n\n    }\n\n    function Alert(props) {\n        return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n    }\n\n    function handleSnackClose(event, reason) {\n        // Evita que a Snackbar seja fechada clicando-se fora dela\n        if (reason === 'clickway') return\n        setSnackState({ ...snackState, open: false })  // Fecha a Snackbar\n\n        // Retorna à página de listagem\n        history.push('/list')\n    }\n\n    function handleDialogClose(result) {\n        setDialogOpen(false)\n\n        // Se o usuário concordou em voltar \n        if (result) history.push('/list')\n    }\n\n    function handleGoBack() {\n\n        // Se o formulário estiver modificado, mostramos o diálogo de confirmação\n        if (isModified) setDialogOpen(true)\n\n        // Senão, voltamos diretamente à de listagem\n        else history.push('/list')\n    }\n\n    return (\n        <>\n            <ConfirmDialog\n                isOpen={dialogOpen}\n                onClose={handleDialogClose}>\n                Há dados não salvos. Deseja realmente voltar?\n            </ConfirmDialog>\n\n            <Snackbar\n                open={snackState.open}\n                autoHideDuration={6000}\n                onClose={handleSnackClose}>\n                <Alert\n                    onClose={handleSnackClose}\n                    severity={snackState.severity}>\n                    {snackState.message}\n                </Alert>\n            </Snackbar>\n\n            <h1>{title}</h1>\n\n            <form className={classes.form} onSubmit={handleSubmit}>\n                <TextField\n                    id=\"marca\"\n                    label=\"Marca\"\n                    variant=\"filled\"\n                    value={karango.marca}\n                    onChange={handleInputChange}\n                    fullWidth\n                    required\n                    error={error.marca !== ''}\n                    helperText={error.marca}\n                />\n\n                <TextField\n                    id=\"modelo\"\n                    label=\"Modelo\"\n                    variant=\"filled\"\n                    value={karango.modelo}\n                    onChange={handleInputChange}\n                    fullWidth\n                    required\n                    error={error.modelo !== ''}\n                    helperText={error.modelo}\n                />\n\n                <TextField\n                    id=\"cor\"\n                    label=\"Cor\"\n                    variant=\"filled\"\n                    value={karango.cor}\n                    onChange={event => handleInputChange(event, 'cor')}\n                    select fullWidth\n                    required\n                    error={error.cor !== ''}\n                    helperText={error.cor} >\n                    <MenuItem value=\"Amarelo\">Amarelo</MenuItem>\n                    <MenuItem value=\"Azul\">Azul</MenuItem>\n                    <MenuItem value=\"Bege\">Bege</MenuItem>\n                    <MenuItem value=\"Branco\">Branco</MenuItem>\n                    <MenuItem value=\"Cinza\">Cinza</MenuItem>\n                    <MenuItem value=\"Dourado\">Dourado</MenuItem>\n                    <MenuItem value=\"Laranja\">Laranja</MenuItem>\n                    <MenuItem value=\"Marrom\">Marrom</MenuItem>\n                    <MenuItem value=\"Prata\">Prata</MenuItem>\n                    <MenuItem value=\"Preto\">Preto</MenuItem>\n                    <MenuItem value=\"Roxo\">Roxo</MenuItem>\n                    <MenuItem value=\"Verde\">Verde</MenuItem>\n                    <MenuItem value=\"Vermelho\">Vermelho</MenuItem>\n                </TextField>\n\n                <TextField\n                    id=\"ano_fabricacao\"\n                    label=\"Ano de Fabricação\"\n                    variant=\"filled\"\n                    value={karango.ano_fabricacao}\n                    onChange={event => handleInputChange(event, 'ano_fabricacao')}\n                    select fullWidth >\n                    {years().map(year => <MenuItem value={year} key={year}>{year}</MenuItem>)}\n                </TextField>\n\n                <TextField\n                    id=\"preco\"\n                    label=\"Preço\"\n                    variant=\"filled\"\n                    value={karango.preco}\n                    onChange={handleInputChange}\n                    fullWidth type=\"number\"\n                    onFocus={event => event.target.select()}\n                    InputProps={{\n                        startAdornment: <InputAdornment position=\"start\">R$</InputAdornment>,\n                    }}\n                    required\n                    error={error.preco !== ''}\n                    helperText={error.preco}\n                />\n\n                <InputMask\n                    formatChars={formatChars}\n                    mask={placaMask}\n                    id=\"placa\"\n                    onChange={event => handleInputChange(event, 'placa')}\n                    value={karango.placa} >\n                    {() => <TextField\n                        label=\"Placa\"\n                        variant=\"filled\"\n                        fullWidth\n                        required\n                        error={error.placa !== ''}\n                        helperText={error.placa}\n                    />}\n                </InputMask>\n\n                <FormControl\n                    className={classes.checkbox}\n                    fullWidth >\n                    <FormControlLabel\n                        control={<Checkbox checked={importadoChecked}\n                            onChange={handleInputChange} id=\"importado\" />}\n                        label=\"Importado?\" />\n                </FormControl>\n\n                <Toolbar\n                    className={classes.toolbar} >\n                    <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        type=\"submit\"\n                        disabled={btnSendState.disabled} >\n\n                        {btnSendState.label}\n\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        onClick={handleGoBack} >\n                        Voltar\n                    </Button>\n                </Toolbar>\n\n                {/* <div>{JSON.stringify(karango)}<br />currentId: {currentId}</div> */}\n            </form>\n        </>\n    )\n}\n","/workspace/Karangos-not-2021-1/karangos/src/ui/FooterBar.js",[],"/workspace/Karangos-not-2021-1/karangos/src/ui/TopBar.js",[],"/workspace/Karangos-not-2021-1/karangos/src/routed/KarangosList2.js",[],"/workspace/Karangos-not-2021-1/karangos/src/ui/ConfirmDialog.js",[],"/workspace/Karangos-not-2021-1/karangos/src/ui/MainMenu.js",[],"/workspace/Karangos-not-2021-1/karangos/src/routed/KarangosList.js",[],"/workspace/Karangos-not-2021-1/karangos/src/routed/ClienteForm.js",["54"],"import React from 'react';\nimport { useEffect, useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputMask from 'react-input-mask';\nimport Button from '@material-ui/core/Button';\nimport axios from 'axios';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport { useHistory, useParams } from 'react-router-dom';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Toolbar from '@material-ui/core/Toolbar'\n\nconst useStyles = makeStyles(() => ({\n    form: {\n        maxWidth: '80%',\n        margin: '0 auto',\n        display: 'flex',\n        justifyContent: 'space-around',\n        flexWrap: 'wrap',\n        '& .MuiFormControl-root': {\n            minWidth: '200px',\n            maxWidth: '500px',\n            marginBottom: '24px'\n        }\n    },\n    toolbar: {\n        marginTop: '36px',\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'space-around',\n    },\n    checkbox: {\n        alignItems: 'center'\n    }\n}))\n\nconst formatChars = {\n    'x': '[0-9]',\n}\n\nconst mascaraCPF = 'xxx.xxx.xxx-xx'\nconst mascaraRG = 'xx.xxx.xxx-x'\nconst mascaraTelefone = '(xx)-xxxx-xxxx'\n\nexport default function ClienteForm() {\n\n    const classes = useStyles()\n\n    const [cliente, setCliente] = useState({\n        id: null,\n        nome: '',\n        cpf: '',\n        rg: '',\n        logradouro: '',\n        num_imovel: '',\n        complemento: '',\n        bairro: '',\n        municipio: '',\n        uf: '',\n        telefone: '',\n        email: '',\n    })\n    const [snackState, setSnackState] = useState({\n        open: false,\n        severity: 'SUCESSO',\n        message: 'CLIENTE SALVO'\n    })\n\n    const [btnSendState, setBtnSendState] = useState({\n        disabled: false,\n        label: 'Enviar'\n    })\n\n    const [error, setError] = useState({\n        nome: '',\n        cpf: '',\n        rg: '',\n        logradouro: '',\n        num_imovel: '',\n        complemento: '',\n        bairro: '',\n        municipio: '',\n        uf: '',\n        telefone: '',\n        email: ''\n    })\n\n    const [isModified, setIsModified] = useState(false)\n    const [dialogOpen, setDialogOpen] = useState(false)\n    const [title, setTitle] = useState('Cadastro Cliente')\n\n    const history = useHistory()\n    const params = useParams()\n\n    useEffect(() => {\n\n        // Verificac se tem o parâmetro id na rota. Se tiver, temos que buscar\n        // os dados do registro no back-end para edição\n        if (params.id) {\n            setTitle('Editando Cliente')\n            getData(params.id)\n        }\n    }, [])\n\n    async function getData(id) {\n        try {\n            let response = await axios.get(`https://api.faustocintra.com.br/clientes/${id}`)\n            setCliente(response.data)\n        }\n        catch (error) {\n            setSnackState({\n                open: true,\n                severity: 'error',\n                message: 'Não foi possível carregar os dados'\n            })\n        }\n    }\n    function handleInputChange(event, property) {\n\n        const clienteTemp = { ...cliente }\n\n        if (event.target.id) property = event.target.id\n\n        if ((property === 'cpf') || (property === 'rg') || (property === 'complemento') || (property === 'uf') || (property === 'telefone')) {\n            clienteTemp[property] = event.target.value\n        }\n\n        else clienteTemp[property] = event.target.value\n\n        setCliente(clienteTemp)\n        setIsModified(true)\n        validate(clienteTemp)\n    }\n\n    // validação dos campos\n    function validate(data) {\n        const errorTemp = {\n            nome: '',\n            cpf: '',\n            rg: '',\n            logradouro: '',\n            num_imovel: '',\n            complemento: '',\n            bairro: '',\n            municipio: '',\n            uf: '',\n            telefone: '',\n            email: ''\n        }\n        let isValid = true\n\n        // Validar nome\n        if (data.nome.trim() === '') {     // trim(): retira os espaços em branco do nício e do final de uma string\n            errorTemp.nome = 'Digitar um Nome válido'\n            isValid = false\n        }\n\n        // Validar cpf\n        if (data.cpf.trim() === '' || data.cpf.includes('_')) {\n            errorTemp.cpf = 'Digitar um CPF válido'\n            isValid = false\n        }\n\n        // Validar rg\n        if (data.rg.trim() === '' || data.rg.includes('_')) {\n            errorTemp.rg = 'Digitar um RG válido'\n            isValid = false\n        }\n\n        // Validar logradouro\n        if (data.logradouro.trim() === '') {\n            errorTemp.logradouro = 'Escolha um Logradouro'\n            isValid = false\n        }\n\n        // Validar complemento\n        if (data.complemento.trim() === '') {\n            errorTemp.complemento = 'Digitar um valor válido'\n            isValid = false\n        }\n\n        // Validar bairro\n        if (data.bairro.trim() === '') {\n            errorTemp.bairro = 'Digitar um valor válido'\n            isValid = false\n        }\n\n        // Validar município\n        if (data.municipio.trim() === '') {\n            errorTemp.municipio = 'Digitar um valor válido'\n            isValid = false\n        }\n\n        // Validar uf\n        if (data.uf.trim() === '') {\n            errorTemp.uf = 'Escolha um UF'\n            isValid = false\n        }\n\n        // Validar telefone\n        if (data.telefone.trim() === '') {\n            errorTemp.telefone = 'Digitar um telefone válido'\n            isValid = false\n        }\n        // Validar Número\n        if (Number(data.num_imovel) <= 0) {\n            errorTemp.num_imovel = 'Digitar um valor válido'\n            isValid = false\n        }\n        // Validar email\n        if (data.email.length <= 5 || data.email.trim() === '' || !data.email.includes('@')) {\n            errorTemp.email = 'O e-mail deve ser preenchido corretemente'\n            isValid = false\n        }\n\n        setError(errorTemp)\n        return isValid\n    }\n\n\n    //Salvar dados do Cliente\n    async function saveData() {\n        try {\n            // Desabilitar o botão Enviar\n            setBtnSendState({ disabled: true, label: 'Enviando...' })\n\n            // Se o registro já existe (edição)\n            if (params.id) {\n                await axios.put(`https://api.faustocintra.com.br/clientes/${params.id}`, cliente)\n            }\n            // Registro não existe, cria um novo (verbo HTTP POST)\n            else {\n                await axios.post(`https://api.faustocintra.com.br/clientes`, cliente)\n            }\n            //alert('Dados salvos com sucesso!')\n            setSnackState({\n                open: true,\n                severity: 'success',\n                message: 'Cliente salvo com sucesso!'\n            })\n            // A FAZER: retornar à página de listagem\n        }\n        catch (error) {\n\n            setSnackState({\n                open: true,\n                severity: 'error',\n                message: 'ERRO: ' + error.message\n            })\n        }\n        // Retoma botão Enviar\n        setBtnSendState({ disabled: false, label: 'Enviar' })\n    }\n\n    function handleSubmit(event) {\n\n        event.preventDefault()   // Segura o recarregamento da página\n        if (validate(cliente)) saveData()\n    }\n\n    function Alert(props) {\n        return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n    }\n\n    function handleSnackClose(event, reason) {\n\n        if (reason === 'clickway') return // Evita que Snackbar feche\n        setSnackState({ ...snackState, open: false })  // Fecha a Snackbar\n        history.push('/listCliente') // Retorna a paginação\n    }\n\n    function handleDialogClose(result) {\n        setDialogOpen(false)\n        if (result) history.push('/listCliente') // voltar\n    }\n\n    function handleGoBack() {\n        if (isModified) setDialogOpen(true) // Mostrar diálogo de confirmação\n        else history.push('/listCliente') // Voltar\n    }\n\n    return (\n        <>\n            <ConfirmDialog\n                isOpen={dialogOpen}\n                onClose={handleDialogClose}>\n                Deseja sair desta página ?\n            </ConfirmDialog>\n\n            <Snackbar\n                open={snackState.open}\n                autoHideDuration={6000}\n                onClose={handleSnackClose}>\n                <Alert\n                    onClose={handleSnackClose}\n                    severity={snackState.severity}>\n                    {snackState.message}\n                </Alert>\n            </Snackbar>\n\n            <h1>{title}</h1>\n\n            <form className={classes.form} onSubmit={handleSubmit} >\n\n                <TextField\n                    className={classes.textfield}\n                    id=\"nome\"\n                    label=\"Nome\"\n                    variant=\"filled\"\n                    value={cliente.nome}\n                    onChange={handleInputChange}\n                    fullWidth\n                    required\n                    error={error.nome !== ''}\n                    helperText={error.nome} />\n\n                <InputMask\n                    formatChars={formatChars}\n                    mask={mascaraCPF}\n                    id=\"cpf\"\n                    value={cliente.cpf}\n                    onChange={event => handleInputChange(event, 'cpf')}>\n                    {() => <TextField\n                        className={classes.textfield}\n                        label=\"CPF\"\n                        variant=\"filled\"\n                        fullWidth\n                        required\n                        error={error.cpf !== ''}\n                        helperText={error.cpf} />}\n                </InputMask>\n\n                <InputMask\n                    formatChars={formatChars}\n                    mask={mascaraRG}\n                    id=\"rg\"\n                    value={cliente.rg}\n                    onChange={event => handleInputChange(event, 'rg')}>\n                    {() => <TextField\n                        className={classes.textfield}\n                        label=\"RG\"\n                        variant=\"filled\"\n                        fullWidth\n                        required\n                        error={error.rg !== ''}\n                        helperText={error.rg} />}\n                </InputMask>\n\n                <TextField\n                    className={classes.textfield}\n                    id=\"logradouro\"\n                    label=\"Logradouro\"\n                    variant=\"filled\"\n                    value={cliente.logradouro}\n                    onChange={handleInputChange}\n                    fullWidth\n                    required\n                    error={error.logradouro !== ''}\n                    helperText={error.logradouro} />\n\n                <TextField\n                    className={classes.textfield}\n                    id=\"num_imovel\"\n                    label=\"Número Imóvel\"\n                    variant=\"filled\"\n                    value={cliente.num_imovel}\n                    onChange={handleInputChange}\n                    fullWidth\n                    required\n                    error={error.num_imovel !== ''}\n                    helperText={error.num_imovel} />\n\n                <TextField\n                    className={classes.textfield}\n                    id=\"complemento\"\n                    label=\"Complemento\"\n                    variant=\"filled\"\n                    value={cliente.complemento}\n                    onChange={handleInputChange}\n                    fullWidth  \n                    required\n                    error={error.complemento !== ''}\n                    helperText={error.complemento} >\n\n                </TextField>\n\n                <TextField\n                    className={classes.textfield}\n                    id=\"bairro\"\n                    label=\"Bairro\"\n                    variant=\"filled\"\n                    value={cliente.bairro}\n                    onChange={handleInputChange}\n                    fullWidth\n                    required\n                    error={error.bairro !== ''}\n                    helperText={error.bairro} />\n\n                <TextField\n                    className={classes.textfield}\n                    id=\"municipio\"\n                    label=\"Município\"\n                    variant=\"filled\"\n                    value={cliente.municipio}\n                    onChange={handleInputChange}\n                    fullWidth\n                    required\n                    error={error.municipio !== ''}\n                    helperText={error.municipio} />\n\n                <TextField\n                    className={classes.textfield}\n                    id=\"uf\"\n                    label=\"UF\"\n                    variant=\"filled\"\n                    value={cliente.uf}\n                    onChange={event => handleInputChange(event, 'uf')}\n                    select fullWidth\n                    required\n                    error={error.uf !== ''}\n                    helperText={error.uf} >\n                    <MenuItem value=\"Acre\">Acre</MenuItem>\n                    <MenuItem value=\"Alagoas\">Alagoas</MenuItem>\n                    <MenuItem value=\"Amapá\">Amapá</MenuItem>\n                    <MenuItem value=\"Amazonas\">Amazonas</MenuItem>\n                    <MenuItem value=\"Bahia\">Bahia</MenuItem>\n                    <MenuItem value=\"Ceará\">Ceará</MenuItem>\n                    <MenuItem value=\"Distrito Federal\">Distrito Federal</MenuItem>\n                    <MenuItem value=\"Espírito Santo\">Espírito Santo</MenuItem>\n                    <MenuItem value=\"Goiás\">Goiás</MenuItem>\n                    <MenuItem value=\"Maranhão\">Maranhão</MenuItem>\n                    <MenuItem value=\"Mato Grosso\">Mato Grosso</MenuItem>\n                    <MenuItem value=\"Mato Grosso do Sul\">Mato Grosso do Sul</MenuItem>\n                    <MenuItem value=\"Minas Gerais\">Minas Gerais</MenuItem>\n                    <MenuItem value=\"Pará\">Pará</MenuItem>\n                    <MenuItem value=\"Paraíba\">Paraíba</MenuItem>\n                    <MenuItem value=\"Paraná\">Paraná</MenuItem>\n                    <MenuItem value=\"Pernambuco\">Pernambuco</MenuItem>\n                    <MenuItem value=\"Piauí\">Piauí</MenuItem>\n                    <MenuItem value=\"Rio de Janeiro\">Rio de Janeiro</MenuItem>\n                    <MenuItem value=\"Rio Grande do Norte\">Rio Grande do Norte</MenuItem>\n                    <MenuItem value=\"Rio Grande do Sul\">Rio Grande do Sul</MenuItem>\n                    <MenuItem value=\"Rondônia\">Rondônia</MenuItem>\n                    <MenuItem value=\"Roraima\">Roraima</MenuItem>\n                    <MenuItem value=\"Santa Catarina\">Santa Catarina</MenuItem>\n                    <MenuItem value=\"São Paulo\">São Paulo</MenuItem>\n                    <MenuItem value=\"Sergipe\">Sergipe</MenuItem>\n                    <MenuItem value=\"Tocantins\">Tocantins</MenuItem>\n                </TextField>\n\n                <InputMask\n                    formatChars={formatChars}\n                    mask={mascaraTelefone}\n                    id=\"telefone\"\n                    value={cliente.telefone}\n                    onChange={event => handleInputChange(event, 'telefone')}>\n                    {() => <TextField\n                        className={classes.textfield}\n                        label=\"Telefone\"\n                        variant=\"filled\"\n                        fullWidth\n                        required\n                        error={error.telefone !== ''}\n                        helperText={error.telefone} />}\n                </InputMask>\n\n                <TextField\n                    className={classes.textfield}\n                    id=\"email\"\n                    label=\"E-mail\"\n                    variant=\"filled\"\n                    value={cliente.email.toLowerCase()}\n                    onChange={handleInputChange}\n                    fullWidth\n                    required\n                    error={error.email !== ''}\n                    helperText={error.email} />\n                <Toolbar\n                    className={classes.toolbar} >\n                    <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        type=\"submit\"\n                        disabled={btnSendState.disabled} >\n\n                        {btnSendState.label}\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        onClick={handleGoBack} >\n                        Voltar\n                    </Button>\n                </Toolbar>\n            </form>\n        </>\n    )\n}\n\n\n\n\n\n\n\n\n\n\n\n\n","/workspace/Karangos-not-2021-1/karangos/src/routed/ClienteList.js",[],{"ruleId":"55","severity":1,"message":"56","line":116,"column":8,"nodeType":"57","endLine":116,"endColumn":10,"suggestions":"58"},{"ruleId":"55","severity":1,"message":"56","line":105,"column":8,"nodeType":"57","endLine":105,"endColumn":10,"suggestions":"59"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'params.id'. Either include it or remove the dependency array.","ArrayExpression",["60"],["61"],{"desc":"62","fix":"63"},{"desc":"62","fix":"64"},"Update the dependencies array to be: [params.id]",{"range":"65","text":"66"},{"range":"67","text":"66"},[3364,3366],"[params.id]",[2691,2693]]